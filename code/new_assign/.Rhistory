min_eval <- function(seq_id){
min(hit_table[hit_table$seq_num == seq_id,"evalue"])
}
# Gather it in a df with the smallest with the smallest e-val for the sequences (not optimized at all because for loop but easier to read)
identified <- data.frame()
for (i in unique(hit_table$seq_num)) {
identified <- rbind(identified, hit_table[hit_table$seq_num == i & hit_table$evalue == min_eval(i),])
# print(i)
}
# Get all the unique id of the best matching sequences (around 4-5% of all the matching sequences)
unique(identified$seq_id)
# If we say that all the found sequences are relevant, then we can just omit the previous step and obtain
unique(hit_table$seq_id)
# Percent of the kept sequences in the first case:
length(unique(hit_table$seq_id))/length(unique(identified$seq_id))*100
library(biomaRt)
# download the genome of Homo sapiens from refseq
# and store the corresponding genome file in '_ncbi_downloads/genomes'
HS.genome.refseq <- getGenome( db       = "refseq",
organism = "Homo sapiens")
readxl()
install.packages("readxl")
library(readxl)
install.packages("readxl")
install.packages("readxl")
library(readxl)
ref <- read_xlsx("../data/nifH_dada2_phylum_v2.0.2")
ref <- read_xlsx("../../data/nifH_dada2_phylum_v2.0.2")
pwd()
getwd()
ref <- read_xlsx("../../data/nifH_dada2_phylum_v2.0.2.xlsx")
View(ref)
unique(ref$sequence)
length(unique(ref$sequence))
length(unique(ref$sequence))
length(ref$sequence)
length(unique(ref$acc))
length(ref$acc)
length(unique(ref$tax))
length(unique(ref$tax2))
length(unique(ref$tax))
length(unique(ref$tax2))
phylogeny <- ref$tax2
library(tidyverse)
phylogeny <- as.tibble(ref$tax2)
phylogeny <- as_tibble(ref$tax2)
View(ref)
phylogeny[1]
phylogeny[1,]
View(phylogeny)
tax <- separate(phylogeny, value, sep = ";", into = c("cluster", "domain", "kingdom", "phylum", "class", "order", "family", "genus"))
tax
View(tax)
tax <- separate(phylogeny, value, sep = ";", into = c("cluster", "domain", "phylum", "class", "order", "family", "genus"))
tax
unique(tax$genus)
length(unique(tax$genus))
length(which(is.na(tax$genus)))
length(which(is.na(tax$order)))
length(which(is.na(tax$phylum)))
length(which(is.na(tax$class)))
length(unique(ref$sequence))
new_db <- read.csv('../../data/new_assign/sequence.ipg.csv', header = T)
new_db
new_db <- read.csv('../../data/new_assign/sequence.ipg.csv', header = T, sep = '\tab')
new_db <- read.csv('../../data/new_assign/sequence.ipg.csv', header = T, sep = '\t')
new_db
view(new_db)
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
new_db <- read.csv('../../data/new_assign/sequence.ipg.csv', header = T, sep = '\t')
view(new_db)
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
fileConn<-file("../../data/new_assign/refseq_accession.txt")
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
close(fileConn)
writeLines(ncbi_accession$Nucleotide[1:10].Accession, fileConn)
new_db <- read.csv('../../data/new_assign/sequence.ipg.csv', header = T, sep = '\t')
view(new_db)
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
fileConn<-file("../../data/new_assign/refseq_accession_test.txt")
writeLines(ncbi_accession$Nucleotide[1:10].Accession, fileConn)
new_db <- read.csv('../../data/new_assign/sequence.ipg.csv', header = T, sep = '\t')
# view(new_db)
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
fileConn<-file("../../data/new_assign/refseq_accession.txt")
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
close(fileConn)
new_db <- read.csv('../../data/new_assign/sequence.ipg.csv', header = T, sep = '\t')
# view(new_db)
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
fileConn<-file("../../data/new_assign/refseq_accession_test.txt")
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
close(fileConn)
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
fileConn<-file("../../data/new_assign/refseq_accession_test.txt")
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
close(fileConn)
install.packages("rentrez")
accession_numbers <- ncbi_accession[1:10]
class(accession_numbers)
accession_numbers <- as.list(ncbi_accession[1:10])
accession_numbers <- as.list(ncbi_accession[1:10])
class(accession_numbers)
accession_numbers
accession_numbers <- as.list(ncbi_accession$Nucleotide.Accession[1:10])
class(accession_numbers)
accession_numbers
accession_numbers <- as.list(ncbi_accession$Nucleotide.Accession[1:10,])
accession_numbers <- as.list(ncbi_accession$Nucleotide.Accession[1:10])
class(accession_numbers)
accession_numbers
ncbi_accession$Nucleotide.Accession[1:10]
accession_numbers <- ncbi_accession$Nucleotide.Accession[1:10]
class(accession_numbers)
accession_numbers <- ncbi_accession$Nucleotide.Accession[1:10]
class(accession_numbers)
accession_numbers
accession_numbers <- c(ncbi_accession$Nucleotide.Accession[1:10])
accession_numbers <- c(ncbi_accession$Nucleotide.Accession[1:10])
class(accession_numbers)
accession_numbers <- ncbi_accession$Nucleotide.Accession[1:10]
class(accession_numbers)
accession_numbers
library(rentrez)
entrez_set_email("remi.legrand38@gmail.com")
library(rentrez)
# entrez_set_email("remi.legrand38@gmail.com")
accession_numbers <- ncbi_accession$Nucleotide.Accession[1:10]
class(accession_numbers)
for (accession in accession_numbers) {
seq <- entrez_fetch(db = "protein", id = accession, rettype = "fasta", retmode = "text")
output_file <- paste0(accession, ".fasta")
write(seq, file = output_file)
cat("Saved sequence for", accession, "to", output_file, "\n")
}
accession_numbers
c("NZ_FQZT01000024.1","NZ_CP045300.1","NZ_FPAU01000001.1","NZ_FNGU01000006.1","NZ_CP010802.1")
class(c("NZ_FQZT01000024.1","NZ_CP045300.1","NZ_FPAU01000001.1","NZ_FNGU01000006.1","NZ_CP010802.1"))
library(rentrez)
# entrez_set_email("remi.legrand38@gmail.com")
accession_numbers <- ncbi_accession$Nucleotide.Accession[1:10]
class(accession_numbers)
for (accession in accession_numbers) {
seq <- entrez_fetch(db = "protein", id = accession, rettype = "fasta", retmode = "text")
output_file <- paste0(accession, ".fasta")
write(seq, file = output_file)
cat("Saved sequence for", accession, "to", output_file, "\n")
}
library(rentrez)
# entrez_set_email("remi.legrand38@gmail.com")
accession_numbers <- ncbi_accession$Nucleotide.Accession[1:10]
class(accession_numbers)
# class(c("NZ_FQZT01000024","NZ_CP045300","NZ_FPAU01000001","NZ_FNGU01000006","NZ_CP010802"))
for (accession in accession_numbers) {
seq <- entrez_fetch(db = "protein", id = accession, rettype = "fasta", retmode = "text")
output_file <- paste0(accession, ".fasta")
write(seq, file = output_file)
cat("Saved sequence for", accession, "to", output_file, "\n")
}
library(rentrez)
# entrez_set_email("remi.legrand38@gmail.com")
accession_numbers <- ncbi_accession$Nucleotide.Accession[1:10]
class(accession_numbers)
# class(c("NZ_FQZT01000024","NZ_CP045300","NZ_FPAU01000001","NZ_FNGU01000006","NZ_CP010802"))
for (accession in accession_numbers) {
seq <- entrez_fetch(db = "nucleotide", id = accession, rettype = "fasta", retmode = "text")
output_file <- paste0(accession, ".fasta")
write(seq, file = output_file)
cat("Saved sequence for", accession, "to", output_file, "\n")
}
cds <- entrez_fetch(db = "nucleotide", id = accession_number, rettype = "fasta_cds_na", retmode = "text")
cds <- entrez_fetch(db = "nucleotide", id = accession_numbers, rettype = "fasta_cds_na", retmode = "text")
output_file <- paste0(accession_number, "_CDS.fasta")
cds <- entrez_fetch(db = "nucleotide", id = accession_numbers, rettype = "fasta_cds_na", retmode = "text")
output_file <- paste0(accession_numbers, "_CDS.fasta")
write(cds, file = output_file)
for (accession_number in accession_numbers) {
cds <- entrez_fetch(db = "nucleotide", id = accession_number, rettype = "fasta_cds_na", retmode = "text")
output_file <- paste0(accession_number, "_CDS.fasta")
write(cds, file = output_file)
cat("Saved CDS sequence for", accession_number, "to", output_file, "\n")
}
# library(rentrez)
# # entrez_set_email("remi.legrand38@gmail.com")
# accession_numbers <- ncbi_accession$Nucleotide.Accession[1:10]
# class(accession_numbers)
#
# # Install the rentrez package if not already installed
# install.packages("rentrez")
# Load the rentrez package
library(rentrez)
# Define the list of accession numbers
accession_numbers <- c("NP_123456.1", "NP_789012.1", "NP_345678.1")
# Fetch the data for each accession number
for (accession in accession_numbers) {
# Search for the protein record
search_term <- paste0(accession, "[Accession]")
search_result <- entrez_search(db = "protein", term = search_term)
# Get the protein record ID
record_id <- search_result$ids[1]
# Fetch the protein record
protein_record <- entrez_fetch(db = "protein", id = record_id, rettype = "gbwithparts", retmode = "text")
# Extract the DNA sequence and taxonomy information
dna_sequence <- getSequence(protein_record)
taxonomy <- getTaxonomy(protein_record)
# Print the results
cat("Accession:", accession, "\n")
cat("DNA Sequence:\n", dna_sequence, "\n")
cat("Taxonomy:", taxonomy, "\n\n")
}
# library(rentrez)
# # entrez_set_email("remi.legrand38@gmail.com")
# accession_numbers <- ncbi_accession$Nucleotide.Accession[1:10]
# class(accession_numbers)
#
# # Install the rentrez package if not already installed
# install.packages("rentrez")
# Load the rentrez package
library(rentrez)
# Define the list of accession numbers
accession_numbers <- c("NP_123456", "NP_789012", "NP_345678")
# Fetch the data for each accession number
for (accession in accession_numbers) {
# Search for the protein record
search_term <- paste0(accession, "[Accession]")
search_result <- entrez_search(db = "protein", term = search_term)
# Get the protein record ID
record_id <- search_result$ids[1]
# Fetch the protein record
protein_record <- entrez_fetch(db = "protein", id = record_id, rettype = "gbwithparts", retmode = "text")
# Extract the DNA sequence and taxonomy information
dna_sequence <- getSequence(protein_record)
taxonomy <- getTaxonomy(protein_record)
# Print the results
cat("Accession:", accession, "\n")
cat("DNA Sequence:\n", dna_sequence, "\n")
cat("Taxonomy:", taxonomy, "\n\n")
}
# library(rentrez)
# # entrez_set_email("remi.legrand38@gmail.com")
# accession_numbers <- ncbi_accession$Nucleotide.Accession[1:10]
# class(accession_numbers)
#
# # Install the rentrez package if not already installed
# install.packages("rentrez")
# Load the rentrez package
library(rentrez)
# Define the list of accession numbers
accession_numbers <- c("NP_123456", "NP_789012", "NP_345678")
# Fetch the data for each accession number
for (accession in accession_numbers) {
# Search for the protein record
search_term <- paste0(accession, "[Accession]")
search_result <- entrez_search(db = "nucleotide", term = search_term)
# Get the protein record ID
record_id <- search_result$ids[1]
# Fetch the protein record
protein_record <- entrez_fetch(db = "protein", id = record_id, rettype = "gbwithparts", retmode = "text")
# Extract the DNA sequence and taxonomy information
dna_sequence <- getSequence(protein_record)
taxonomy <- getTaxonomy(protein_record)
# Print the results
cat("Accession:", accession, "\n")
cat("DNA Sequence:\n", dna_sequence, "\n")
cat("Taxonomy:", taxonomy, "\n\n")
}
# Load the rentrez package
library(rentrez)
# Define the list of accession numbers
accession_numbers <- c("NZ_FQZT01000024", "NZ_CP045300", "NZ_FPAU01000001")
# Fetch the data for each accession number
for (accession in accession_numbers) {
# Search for the protein record
search_term <- paste0(accession, "[Accession]")
search_result <- entrez_search(db = "protein", term = search_term)
# Get the protein record ID
record_id <- search_result$ids[1]
# Fetch the protein record
protein_record <- entrez_fetch(db = "protein", id = record_id, rettype = "gbwithparts", retmode = "text")
# Extract the DNA sequence and taxonomy information
dna_sequence <- getSequence(protein_record)
taxonomy <- getTaxonomy(protein_record)
# Print the results
cat("Accession:", accession, "\n")
cat("DNA Sequence:\n", dna_sequence, "\n")
cat("Taxonomy:", taxonomy, "\n\n")
}
new_db <- read.csv('../../data/new_assign/sequence.ipg.csv', header = T, sep = '\t')
# view(new_db)
View(new_db)
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
fileConn<-file("../../data/new_assign/refseq_accession.txt")
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
close(fileConn)
hit_table <- read.csv('../../data/new_assign/HitTable.csv', header = F,
col.names = c("seq_num", "seq_id", "percent_identity", "alignment_length", "mismatches", "gap_opens", "q.start", "q.end", "s.start", "s.end", "evalue", "bit_score"))
hit_table
# function to get the smallest e-val depending on the sequence
min_eval <- function(seq_id){
min(hit_table[hit_table$seq_num == seq_id,"evalue"])
}
# Gather it in a df with the smallest with the smallest e-val for the sequences (not optimized at all because for loop but easier to read)
identified <- data.frame()
for (i in unique(hit_table$seq_num)) {
identified <- rbind(identified, hit_table[hit_table$seq_num == i & hit_table$evalue == min_eval(i),])
# print(i)
}
# Get all the unique id of the best matching sequences (around 4-5% of all the matching sequences)
unique(identified$seq_id)
# If we say that all the found sequences are relevant, then we can just omit the previous step and obtain
unique(hit_table$seq_id)
# Percent of the kept sequences in the first case:
length(unique(hit_table$seq_id))/length(unique(identified$seq_id))*100
library(biomaRt)
# download the genome of Homo sapiens from refseq
# and store the corresponding genome file in '_ncbi_downloads/genomes'
HS.genome.refseq <- getGenome( db       = "refseq",
organism = "Homo sapiens")
hit_table <- read.csv('../../data/new_assign/HitTable.csv', header = F,
col.names = c("seq_num", "seq_id", "percent_identity", "alignment_length", "mismatches", "gap_opens", "q.start", "q.end", "s.start", "s.end", "evalue", "bit_score"))
hit_table
# function to get the smallest e-val depending on the sequence
min_eval <- function(seq_id){
min(hit_table[hit_table$seq_num == seq_id,"evalue"])
}
# Gather it in a df with the smallest with the smallest e-val for the sequences (not optimized at all because for loop but easier to read)
identified <- data.frame()
for (i in unique(hit_table$seq_num)) {
identified <- rbind(identified, hit_table[hit_table$seq_num == i & hit_table$evalue == min_eval(i),])
# print(i)
}
# Get all the unique id of the best matching sequences (around 4-5% of all the matching sequences)
# unique(identified$seq_id)
# If we say that all the found sequences are relevant, then we can just omit the previous step and obtain
# unique(hit_table$seq_id)
# Percent of the kept sequences in the first case:
length(unique(hit_table$seq_id))/length(unique(identified$seq_id))*100
library(biomaRt)
# download the genome of Homo sapiens from refseq
# and store the corresponding genome file in '_ncbi_downloads/genomes'
HS.genome.refseq <- getGenome( db       = "refseq",
organism = "Homo sapiens")
hit_table <- read.csv('../../data/new_assign/HitTable.csv', header = F,
col.names = c("seq_num", "seq_id", "percent_identity", "alignment_length", "mismatches", "gap_opens", "q.start", "q.end", "s.start", "s.end", "evalue", "bit_score"))
hit_table
# function to get the smallest e-val depending on the sequence
min_eval <- function(seq_id){
min(hit_table[hit_table$seq_num == seq_id,"evalue"])
}
# Gather it in a df with the smallest with the smallest e-val for the sequences (not optimized at all because for loop but easier to read)
identified <- data.frame()
for (i in unique(hit_table$seq_num)) {
identified <- rbind(identified, hit_table[hit_table$seq_num == i & hit_table$evalue == min_eval(i),])
# print(i)
}
# Get all the unique id of the best matching sequences (around 4-5% of all the matching sequences)
# unique(identified$seq_id)
# If we say that all the found sequences are relevant, then we can just omit the previous step and obtain
# unique(hit_table$seq_id)
# Percent of the kept sequences in the first case:
length(unique(hit_table$seq_id))/length(unique(identified$seq_id))*100
library(biomaRt)
# download the genome of Homo sapiens from refseq
# and store the corresponding genome file in '_ncbi_downloads/genomes'
HS.genome.refseq <- getGenome( db       = "refseq",
organism = "Homo sapiens")
hit_table <- read.csv('../../data/new_assign/HitTable.csv', header = F,
col.names = c("seq_num", "seq_id", "percent_identity", "alignment_length", "mismatches", "gap_opens", "q.start", "q.end", "s.start", "s.end", "evalue", "bit_score"))
hit_table
# function to get the smallest e-val depending on the sequence
min_eval <- function(seq_id){
min(hit_table[hit_table$seq_num == seq_id,"evalue"])
}
# Gather it in a df with the smallest with the smallest e-val for the sequences (not optimized at all because for loop but easier to read)
identified <- data.frame()
for (i in unique(hit_table$seq_num)) {
identified <- rbind(identified, hit_table[hit_table$seq_num == i & hit_table$evalue == min_eval(i),])
# print(i)
}
# Get all the unique id of the best matching sequences (around 4-5% of all the matching sequences)
# unique(identified$seq_id)
# If we say that all the found sequences are relevant, then we can just omit the previous step and obtain
# unique(hit_table$seq_id)
# Percent of the kept sequences in the first case:
length(unique(hit_table$seq_id))/length(unique(identified$seq_id))*100
# library(biomaRt)
#
# # download the genome of Homo sapiens from refseq
# # and store the corresponding genome file in '_ncbi_downloads/genomes'
# HS.genome.refseq <- getGenome( db       = "refseq",
#                                organism = "Homo sapiens")
# # import downloaded genome as Biostrings object
# Human_Genome <- read_genome(file = HS.genome.refseq)
# # look at the Biostrings object
# Human_Genome
install.packages("readxl")
library(readxl)
ref <- read_xlsx("../../data/nifH_dada2_phylum_v2.0.2.xlsx")
length(unique(ref$tax2))
length(ref$acc)
library(tidyverse)
phylogeny[1,]
# install.packages("readxl")
library(readxl)
# install.packages("readxl")
library(readxl)
ref <- read_xlsx("../../data/nifH_dada2_phylum_v2.0.2.xlsx")
length(unique(ref$tax2))
length(ref$acc)
library(tidyverse)
phylogeny[1,]
new_db <- read.csv('../../data/new_assign/sequence.ipg.csv', header = T, sep = '\t')
# view(new_db)
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
fileConn<-file("../../data/new_assign/refseq_accession.txt")
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
close(fileConn)
install.packages("rentrez")
View(ncbi_accession)
unique(ncbi_accession$Id)
length(unique(ncbi_accession$Id))
new_db <- read.csv('../../data/new_assign/sequence.ipg.csv', header = T, sep = '\t')
# view(new_db)
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
length(unique(ncbi_accession$Id))
fileConn<-file("../../data/new_assign/refseq_accession.txt")
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
close(fileConn)
View(ncbi_accession)
length(unique(ncbi_accession$Id))
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
length(unique(ncbi_accession$Id))
fileConn<-file("../../data/new_assign/refseq_accession.txt")
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
close(fileConn)
fileConn<-file("../../data/new_assign/refseq_id")
writeLines(unique(ncbi_accession$Id), fileConn)
unique_id_refseq <- unique(ncbi_accession$Id
unique <- unique(ncbi_accession$Id)
uni <- unique(ncbi_accession$Id)
writeLines(uni, fileConn)
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
length(unique(ncbi_accession$Id))
fileConn<-file("../../data/new_assign/refseq_accession.txt")
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
close(fileConn)
uni <- unique(ncbi_accession$Id)
fileConn<-file("../../data/new_assign/refseq_id")
writeLines(uni, fileConn)
uni <- unique(ncbi_accession$Id)
uni
class(uni)
uni <- as.list(unique(ncbi_accession$Id))
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
length(unique(ncbi_accession$Id))
fileConn<-file("../../data/new_assign/refseq_accession.txt")
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
close(fileConn)
uni <- as.list(unique(ncbi_accession$Id))
fileConn<-file("../../data/new_assign/refseq_id")
writeLines(uni, fileConn)
uni <- as.character(unique(ncbi_accession$Id))
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
length(unique(ncbi_accession$Id))
fileConn<-file("../../data/new_assign/refseq_accession.txt")
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
close(fileConn)
uni <- as.character(unique(ncbi_accession$Id))
fileConn<-file("../../data/new_assign/refseq_id")
writeLines(uni, fileConn)
close(fileConn)
uni <- (unique(as.character(ncbi_accession$Id)))
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
length(unique(ncbi_accession$Id))
fileConn<-file("../../data/new_assign/refseq_accession.txt")
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
close(fileConn)
uni <- (unique(as.character(ncbi_accession$Id)))
fileConn<-file("../../data/new_assign/refseq_id")
writeLines(uni, fileConn)
close(fileConn)
View(new_db)
View(ncbi_accession)
new_db <- read.csv('../../data/new_assign/sequence.ipg.csv', header = T, sep = '\t')
# view(new_db)
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
length(unique(ncbi_accession$Id))
fileConn<-file("../../data/new_assign/refseq_accession.txt")
writeLines(ncbi_accession$Nucleotide.Accession, fileConn)
close(fileConn)
uni <- (unique(as.character(ncbi_accession$Id)))
fileConn<-file("../../data/new_assign/refseq_id")
writeLines(uni, fileConn)
close(fileConn)
ncbi_accession <- new_db[new_db$Source == "RefSeq",]
ncbi_accession
