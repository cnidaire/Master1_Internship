library(dada2); packageVersion("dada2")
# Specify path where FASTQ files are located
path <- "../data/dupe_train" # change to the directory where the FASTQ files are located after unzipping
# Sort the files to ensure reverse and forward reads are in the same order
fnFs <- sort(list.files(path, pattern="_R1_001.fastq"))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq"))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(fnFs, "_"), `[`, 1) # here I don't get the end of he code
View(sample.names)
library(dada2); packageVersion("dada2")
# Specify path where FASTQ files are located
path <- "../data/dupe_train" # change to the directory where the FASTQ files are located after unzipping
# Sort the files to ensure reverse and forward reads are in the same order
fnFs <- sort(list.files(path, pattern="_R1_001.fastq"))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq"))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(fnFs, "_"), `[`, 1) # here I don't get the end of the code but it retrieve the name of the samples
# Specify the full path to the fnFs and fnRs
fnFs <- file.path(path, fnFs)
fnRs <- file.path(path, fnRs)
# Plot average quality score
plotQualityProfile(fnFs[1:2])# I don't know what is negative but the curve is weird
plotQualityProfile(fnRs[1:6])
# Create a new file path to store filtered and trimmed reads
filt_path <- file.path(path, "filtered") # place the filtered files in a "filtered" subdirectory
# Rename filtered files
filtFs <- file.path(filt_path, paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(filt_path, paste0(sample.names, "_R_filt.fastq.gz"))
# Quality Filtering and trimming
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(250,250),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
# Estimate the error model for DADA2 algorithm using reverse reads
errF <- learnErrors(filtFs, multithread=TRUE)
# do the same on the reverse read and it will take more cycles because the reverse reads are worse
errR <- learnErrors(filtRs, multithread=TRUE)
# Plot error rates for all possible bases transitions
plotErrors(errF, nominalQ=TRUE) # black:observed error rate, red:expected
plotErrors(errR, nominalQ=TRUE) # black:observed error rate, red:expected
# Dereplicate FASTQ files to speed up computation
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
# Apply core sequence-variant inference algorithm to reverse reads
dadaFs <- dada(derepFs, err=errR, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
# Merge denoised reads
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE) # will only merge perfectly overlapped seq so can addmaxMismatch 1 or 2 if lots of reads are not merging
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
table(nchar(getSequences(seqtab)))
# Perform de novo chimera sequece detection and removal
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
# Calculate the proportion of the non-chimeric RSVs (reads)
sum(seqtab.nochim)/sum(seqtab)
# Assign taxonomy using RDP database (greengenes and Silva also available)
# This is performed in two steps: this first one assigns phylum to genus
taxa <- assignTaxonomy(seqtab.cochim,"../data/ena_nifh.fasta", multithread=TRUE) # database we want to use
# Assign taxonomy using RDP database (greengenes and Silva also available)
# This is performed in two steps: this first one assigns phylum to genus
taxa <- assignTaxonomy(seqtab.nochim,"../data/ena_nifh.fasta", multithread=TRUE) # database we want to use
# Assign taxonomy using RDP database (greengenes and Silva also available)
# This is performed in two steps: this first one assigns phylum to genus
taxa <- assignTaxonomy(seqtab.nochim,"../data/nifH_dada2_phylum_v1.1.0.fasta", multithread=TRUE) # database we want to use
unname(head(taxa))
# Assign taxonomy using RDP database (greengenes and Silva also available)
# This is performed in two steps: this first one assigns phylum to genus
taxa <- assignTaxonomy(seqtab.nochim,"../data/nifH_dada2_phylum_v1.1.0.fasta", multithread=TRUE) # database we want to use
unname(head(taxa))
# Assign species (when possible)
system.time({taxa.plus <- addSpecies(taxa, "../data/species_assignement.fa.gz", verbose=TRUE)
colnames(taxa.plus) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
unname(taxa.plus)}) # Usually hard to go down to species level assignment with V4 region (hypervariable region)
# Assign taxonomy using RDP database (greengenes and Silva also available)
# This is performed in two steps: this first one assigns phylum to genus
taxa <- assignTaxonomy(seqtab.nochim,"../data/nifH_dada2_phylum_v1.1.0.fasta", multithread=TRUE) # database we want to use
unname(head(taxa))
# Assign species (when possible)
system.time({taxa.plus <- addSpecies(taxa, "../data/species_assignement.fa.gz", verbose=TRUE)
colnames(taxa.plus) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
unname(taxa.plus)}) # Usually hard to go down to species level assignment with V4 region (hypervariable region)
# Assign taxonomy using RDP database (greengenes and Silva also available)
# This is performed in two steps: this first one assigns phylum to genus
taxa <- assignTaxonomy(seqtab.nochim,"../data/nifH_dada2_phylum_v1.1.0.fasta", multithread=TRUE) # database we want to use
unname(head(taxa))
# Assign species (when possible)
system.time({taxa.plus <- addSpecies(taxa, "../data/species_assignement.fa.gz", verbose=TRUE)
colnames(taxa.plus) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
unname(taxa.plus)}) # Usually hard to go down to species level assignment with V4 region (hypervariable region)
# Assign taxonomy using RDP database (greengenes and Silva also available)
# This is performed in two steps: this first one assigns phylum to genus
taxa <- assignTaxonomy(seqtab.nochim,"../data/nifH_dada2_phylum_v1.1.0.fasta", multithread=TRUE) # database we want to use
unname(head(taxa))
# Assign species (when possible)
system.time({taxa.plus <- addSpecies(taxa, "../data/nifH_dada2_phylum_v1.1.0.fasta", verbose=TRUE)
colnames(taxa.plus) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
unname(taxa.plus)}) # Usually hard to go down to species level assignment with V4 region (hypervariable region)
View(taxa)
View(taxa)
class(taxa)
write.table(taxa, 'taxa.txt')
write.table(taxa, '../data/taxa.txt')
summary(taxa)
View(taxa)
head(taxa[1,])
taxa[1,]
taxa[2,]
sum(is.na(taxa[,1]))
colnames(taxa)
sum(is.na(taxa[,1]))
length(taxa)/sum(is.na(taxa[,1]))
sum(is.na(taxa[,1]))/length(taxa)
sum(is.na(taxa[,2]))/length(taxa)
sum(is.na(taxa[,1]))/length(taxa)*100 # 0.01% of data has no associated kingdom
sum(is.na(taxa[,5]))/length(taxa)*100 #
colnames(taxa)
sum(is.na(taxa[,1]))/length(taxa)*100 # 1% of data has no associated kingdom
sum(is.na(taxa[,2]))/length(taxa)*100 # 9% at the
sum(is.na(taxa[,5]))/length(taxa)*100 # 13% at the
sum(is.na(taxa[,7]))/length(taxa)*100 # 13% at the family lvl
sum(is.na(taxa[,6]))/length(taxa)*100 # 13% at the family lvl
colnames(taxa)
sum(is.na(taxa[,1]))/length(taxa)*100 # 1% of data has no associated kingdom
sum(is.na(taxa[,2]))/length(taxa)*100 # 9% at the phylum lvl
sum(is.na(taxa[,5]))/length(taxa)*100 # 13% at the family lvl and
sum(is.na(taxa[,6]))/length(taxa)*100 # 13% at the family lvl
length(taxa)
is.na(taxa[,5])
table(is.na(taxa[,5]))
table(is.na(taxa[,6]))
dim(taxa)
sum(is.na(taxa[,1]))/dim(taxa)[1]*100 # 1% of data has no associated kingdom
sum(is.na(taxa[,2]))/dim(taxa)[1]*100 # 9% at the phylum lvl
sum(is.na(taxa[,5]))/dim(taxa)[1]*100 # 13% at the family lvl and around the same for the genus lvl
sum(is.na(taxa[,1]))/dim(taxa)[1]*100 # 10% of data has no associated kingdom
sum(is.na(taxa[,2]))/dim(taxa)[1]*100 # 9% at the phylum lvl
sum(is.na(taxa[,2]))/dim(taxa)[1]*100 # 57% at the phylum lvl
sum(is.na(taxa[,5]))/dim(taxa)[1]*100 # 13% at the family lvl and around the same for the genus lvl
sum(is.na(taxa[,5]))/dim(taxa)[1]*100
sum(is.na(taxa[,6]))/dim(taxa)[1]*100
colnames(taxa)
sum(is.na(taxa[,1]))/dim(taxa)[1]*100 # 10% of data has no associated kingdom
sum(is.na(taxa[,2]))/dim(taxa)[1]*100 # 57% at the phylum lvl
sum(is.na(taxa[,5]))/dim(taxa)[1]*100 # 78% at the family lvl and around the same for the genus lvl
View(taxa)
View(taxa)
non_id <- taxa[1,10]
non_id <- taxa[is.na(taxa[,6]),]
View(non_id)
write.table(non_id, '../data/non_id.txt') # To save the table
identified <- taxa[!is.na(taxa[,6]),]
View(identified)
identified <- taxa[!is.na(taxa[,6]),]
write.table(identified, '../data/identified.txt') # To save the table
row.names(non_id)
nchar(row.names(non_id))
hist(nchar(row.names(non_id)))
hist(nchar(row.names(indentified)))
hist(nchar(row.names(identified)))
train <- taxa[is.na(taxa[,6]),][1:10,]
View(train)
nrow(train)
train_fasta <- tibble(id = c(1:nrow(train)), row.names(train))
train_fasta <- tibble(id = c(1:nrow(train)), seq = row.names(train))
library(tidyverse)
library(tidyverse)
train <- taxa[is.na(taxa[,6]),][1:10,]
nrow(train)
train_fasta <- tibble(id = c(1:nrow(train)), seq = row.names(train))
View(train_fasta)
train_fasta <- as.list(separate_rows(unite(train_fasta, id, seq, col = "sequence",sep = ","), sequence, sep = ","))
View(train_fasta)
train_fasta <- separate_rows(unite(train_fasta, id, seq, col = "sequence",sep = ","), sequence, sep = ",")
unite(train_fasta, id, seq, col = "sequence",sep = ",")
train_fasta <- tibble(id = paste0("> ",c(1:nrow(train))), seq = row.names(train))
unite(train_fasta, id, seq, col = "sequence", sep = ",")
separate_rows(unite(train_fasta, id, seq, col = "sequence", sep = ","), sequence, sep =",")
train_fasta <- separate_rows(unite(train_fasta, id, seq, col = "sequence", sep = ","), sequence, sep =",")
View(train_fasta)
library(tidyverse)
train <- taxa[is.na(taxa[,6]),][1:10,]
nrow(train)
train_fasta <- tibble(id = paste0("> ",c(1:nrow(train))), seq = row.names(train))
train_fasta <- separate_rows(unite(train_fasta, id, seq, col = "sequence", sep = ","), sequence, sep =",")
write.table(train_fasta, '../data/train.fasta') # To save the table
library(tidyverse)
train <- taxa[is.na(taxa[,6]),][1:10,]
nrow(train)
train_fasta <- tibble(id = paste0("> ",c(1:nrow(train))), seq = row.names(train))
train_fasta <- separate_rows(unite(train_fasta, id, seq, col = "sequence", sep = ","), sequence, sep =",")
write.table(as.list(train_fasta), '../data/train.fasta') # To save the table
write_file(train_fasta, '../data/train.fasta')
write.table(train_fasta, '../data/train.fasta') # problem, I still have sequence at the beginning of the file
write.table(as.list(train_fasta), '../data/train.fasta') # problem, I still have sequence at the beginning of the file
write.table(as.list(train_fasta), '../data/train.fasta') # problem, I still have sequence at the beginning of the file
write.table(train_fasta$sequence, '../data/train.fasta') # problem, I still have sequence at the beginning of the file
write.table(as.list(train_fasta$sequence), '../data/train.fasta') # problem, I still have sequence at the beginning of the file
library(tidyverse)
train <- taxa[is.na(taxa[,6]),][1:10,]
nrow(train)
train_fasta <- tibble(id = paste0("> ",c(1:nrow(train))), seq = row.names(train))
train_fasta <- separate_rows(unite(train_fasta, id, seq, col = "sequence", sep = ","), sequence, sep =",")
setwd("../data")
fileConn<-file("train.fasta")
writeLines(train_fasta$sequence, fileConn)
close(fileConn)
# write.table(as.list(train_fasta$sequence), '../data/train.fasta') # problem, I still have sequence at the beginning of the file
# write_file()
library(tidyverse)
train <- taxa[is.na(taxa[,6]),][1:10,]
nrow(train)
train_fasta <- tibble(id = paste0("> ",c(1:nrow(train))), seq = row.names(train))
train_fasta <- separate_rows(unite(train_fasta, id, seq, col = "sequence", sep = ","), sequence, sep =",")
setwd("../data")
fileConn<-file("train.fasta")
writeLines(train_fasta, fileConn)
library(tidyverse)
train <- taxa[is.na(taxa[,6]),][1:10,]
nrow(train)
train_fasta <- tibble(id = paste0("> ",c(1:nrow(train))), seq = row.names(train))
train_fasta <- separate_rows(unite(train_fasta, id, seq, col = "sequence", sep = ","), sequence, sep =",")
setwd("../data")
fileConn<-file("train.fasta")
writeLines(train_fasta$sequence, fileConn)
close(fileConn)
# write.table(as.list(train_fasta$sequence), '../data/train.fasta') # problem, I still have sequence at the beginning of the file
# write_file()
library(tidyverse)
train <- taxa[is.na(taxa[,6]),]
nrow(train)
train_fasta <- tibble(id = paste0("> ",c(1:nrow(train))), seq = row.names(train))
train_fasta <- separate_rows(unite(train_fasta, id, seq, col = "sequence", sep = ","), sequence, sep =",")
setwd("../data")
fileConn<-file("train.fasta")
writeLines(train_fasta$sequence, fileConn)
close(fileConn)
View(taxa)
table(taxa[,5])
